batter_pbb <- home_batter$vRBB
batter_pso <- home_batter$vRSO
batter_pbo <- home_batter$vRBO
} else {
batter_p1b <- home_batter$vL1B
batter_p2b <- home_batter$vL2B
batter_p3b <- home_batter$vL3B
batter_phr <- home_batter$vLHR
batter_pbb <- home_batter$vLBB
batter_pso <- home_batter$vLSO
batter_pbo <- home_batter$vLBO
}
if(home_batter$bats == "R") {
pitcher_p1b <- home_pitcher$vR1B
pitcher_p2b <- home_pitcher$vR2B
pitcher_p3b <- home_pitcher$vR3B
pitcher_phr <- home_pitcher$vRHR
pitcher_pbb <- home_pitcher$vRBB
pitcher_pso <- home_pitcher$vRSO
pitcher_pbo <- home_pitcher$vRBO
} else {
pitcher_p1b <- home_pitcher$vR1B
pitcher_p2b <- home_pitcher$vR2B
pitcher_p3b <- home_pitcher$vR3B
pitcher_phr <- home_pitcher$vRHR
pitcher_pbb <- home_pitcher$vRBB
pitcher_pso <- home_pitcher$vRSO
pitcher_pbo <- home_pitcher$vRBO
}
league_p1b <- .152056268409
league_p2b <- .045140889455
league_p3b <- .004727358249
league_phr <- .026802180461
league_pbb <- .081558771793
league_pso <- .198009085542
league_pbo <- .491705446091
# basic odds ratio calculator
odds1b <- ((batter_p1b / (1 - batter_p1b)) *
(pitcher_p1b / (1 - pitcher_p1b)) /
(league_p1b / (1 - league_p1b)))
odds2b <- ((batter_p2b / (1 - batter_p2b)) *
(pitcher_p2b / (1 - pitcher_p2b)) /
(league_p2b / (1 - league_p2b)))
odds3b <- ((batter_p3b / (1 - batter_p3b)) *
(pitcher_p3b / (1 - pitcher_p3b)) /
(league_p3b / (1 - league_p3b)))
oddshr <- ((batter_phr / (1 - batter_phr)) *
(pitcher_phr / (1 - pitcher_phr)) /
(league_phr / (1 - league_phr)))
oddsbb <- ((batter_pbb / (1 - batter_pbb)) *
(pitcher_pbb / (1 - pitcher_pbb)) /
(league_pbb / (1 - league_pbb)))
oddsso <- ((batter_pso / (1 - batter_pso)) *
(pitcher_pso / (1 - pitcher_pso)) /
(league_pso / (1 - league_pso)))
oddsbo <- ((batter_pbo / (1 - batter_pbo)) *
(pitcher_pbo / (1 - pitcher_pbo)) /
(league_pbo / (1 - league_pbo)))
# turn odds from odds calculator into probabilities
p1b <- odds1b / (odds1b + 1)
p2b <- odds2b / (odds2b + 1)
p3b <- odds3b / (odds3b + 1)
phr <- oddshr / (oddshr + 1)
pbb <- oddsbb / (oddsbb + 1)
pso <- oddsso / (oddsso + 1)
pbo <- oddsbo / (oddsbo + 1)
total <- p1b +
p2b +
p3b +
phr +
pbb +
pso +
pbo
# normalize probabilites to equal 1
np1b <- p1b / total
np2b <- p2b / total
np3b <- p3b / total
nphr <- phr / total
npbb <- pbb / total
npso <- pso / total
npbo <- pbo / total
xPA <- as.data.frame(rbind(np1b,
np2b,
np3b,
nphr,
npbb,
npso,
npbo
)
)
xPA$outcome <- c("1b", "2b", "3b", "hr", "bb", "so", "bo")
colnames(xPA) <- c("prob", "outcome")
PA_list <- c("1b", "2b", "3b", "hr", "bb", "so", "bo")
sim_PA <- as.data.frame(sample(xPA$prob, 1, replace = TRUE, prob = c(xPA$prob)))
colnames(sim_PA) <- "PA_result"
sim_PA_result <- as.data.frame(xPA$outcome[match(sim_PA$PA_result, xPA$prob)])
colnames(sim_PA_result) <- "result"
return(sim_PA_result)
}
## Inning Simulation ##
test <- function()
{
while (inning < 9)
{
outs <- 0
first_base <- ""
second_base <- ""
third_base <- ""
while (outs < 3)
{
sim_PA_result <- at_bat(batter)
if(sim_PA_result[1,1] == 'bo' | sim_PA_result[1,1] == 'so')
{
outs <- outs + 1
box_score$PAs[batter] <- box_score$PAs[batter] + 1
}
if(sim_PA_result[1,1] == 'bb')
{
runs_before <- runs
if (third_base != "" && second_base != "" && first_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == third_base] <- box_score$Runs[box_score$Name == third_base] + 1
third_base <- second_base
second_base <- first_base
first_base <= ""
}
if (third_base == "" && second_base != "" && first_base != "")
{
third_base <- second_base
second_base <- first_base
first_base <- ""
}
if (third_base == "" && second_base == "" && first_base != "")
{
second_base <- first_base
first_base <- ""
}
first_base <- box_score$Name[batter]
runs_diff <- runs - runs_before
box_score$PAs[batter] <- box_score$PAs[batter] + 1
box_score$BB[batter] <- box_score$BB[batter] + 1
box_score$RBI[batter] <- box_score$RBI[batter] + runs_diff
}
if(sim_PA_result[1,1] == '1b')
{
runs_before <- runs
if (third_base != '')
{
runs <- runs + 1
box_score$Runs[box_score$Name == third_base] <- box_score$Runs[box_score$Name == third_base] + 1
third_base <- ""
}
if (second_base == "")
{
third_base <- second_base
second_base <- ""
}
if (first_base != "")
{
second_base <- first_base
}
first_base <- box_score$Name[batter]
runs_diff <- runs - runs_before
box_score$PAs[batter] <- box_score$PAs[batter] + 1
box_score$Hits[batter] <- box_score$Hits[batter] + 1
box_score$Single[batter] <- box_score$Single[batter] + 1
box_score$RBI[batter] <- box_score$RBI[batter] + runs_diff
}
if(sim_PA_result[1,1] == '2b')
{
runs_before <- runs
if (third_base != '')
{
runs <- runs + 1
box_score$Runs[box_score$Name == third_base] <- box_score$Runs[box_score$Name == third_base] + 1
third_base <- ""
}
if (second_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == second_base] <- box_score$Runs[box_score$Name == second_base] + 1
second_base <- ""
}
if (first_base != "")
{
third_base <- first_base
first_base <- ""
}
second_base <- box_score$Name[batter]
runs_diff <- runs - runs_before
box_score$PAs[batter] <- box_score$PAs[batter] + 1
box_score$Hits[batter] <- box_score$Hits[batter] + 1
box_score$Double[batter] <- box_score$Double[batter] + 1
box_score$RBI[batter] <- box_score$RBI[batter] + runs_diff
}
if(sim_PA_result[1,1] == '3b')
{
runs_before <- runs
if (third_base != '')
{
runs <- runs + 1
box_score$Runs[box_score$Name == third_base] <- box_score$Runs[box_score$Name == third_base] + 1
third_base <- ""
}
if (second_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == second_base] <- box_score$Runs[box_score$Name == second_base] + 1
second_base <- ""
}
if (first_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == first_base] <- box_score$Runs[box_score$Name == first_base] + 1
first_base <- ""
}
third_base <- box_score$Name[batter]
runs_diff <- runs - runs_before
box_score$PAs[batter] <- box_score$PAs[batter] + 1
box_score$Hits[batter] <- box_score$Hits[batter] + 1
box_score$Triple[batter] <- box_score$Triple[batter] + 1
box_score$RBI[batter] <- box_score$RBI[batter] + runs_diff
}
if(sim_PA_result[1,1] == 'hr')
{
runs_before <- runs
if (third_base != '')
{
runs <- runs + 1
box_score$Runs[box_score$Name == third_base] <- box_score$Runs[box_score$Name == third_base] + 1
third_base <- ""
}
if (second_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == second_base] <- box_score$Runs[box_score$Name == second_base] + 1
second_base <- ""
}
if (first_base != "")
{
runs <- runs + 1
box_score$Runs[box_score$Name == first_base] <- box_score$Runs[box_score$Name == first_base] + 1
first_base <- ""
}
runs <- runs + 1
box_score$Runs[batter] <- box_score$Runs[batter] + 1
runs_diff <- runs - runs_before
box_score$PAs[batter] <- box_score$PAs[batter] + 1
box_score$Hits[batter] <- box_score$Hits[batter] + 1
box_score$HR[batter] <- box_score$HR[batter] + 1
box_score$RBI[batter] <- box_score$RBI[batter] + runs_diff
}
if (batter == 9) {
batter <- 1
} else {
batter <- batter + 1
}
inning_state <- data.frame(c(outs, runs, first_base, second_base, third_base))
colnames(inning_state) <- "Results"
rownames(inning_state) <- c("Outs", "Runs", "First Base", "Second Base", "Third Base")
}
inning <- inning + 1
}
batter = 1
runs <- 0
inning <- 1
return(box_score)
}
##mean_box_score <- replicate(100, test())
box_score_total <- data.frame(PAs = integer(9),
Hits = integer(9),
BB = integer(9),
Single = integer(9),
Double = integer(9),
Triple = integer(9),
HR = integer(9),
Runs = integer(9),
RBI = integer(9))
i <- 0
while (i < 1000)
{
batter = 1
runs <- 0
inning <- 1
box_score <- data.frame(Name = character(9),
PAs = integer(9),
Hits = integer(9),
BB = integer(9),
Single = integer(9),
Double = integer(9),
Triple = integer(9),
HR = integer(9),
Runs = integer(9),
RBI = integer(9))
box_score$Name <- home_lineup$Name
box_score <- test()
box_score_total <- box_score_total + box_score[,-1]
i <- i + 1
}
box_score_total <- box_score_total/1000
box_score_total$Name <- box_score$Name
box_score_total <- box_score_total[,c(10,1:9)]
return(box_score_total)
}
blue_jays <- away_team(12)
mariners <- home_team(12)
##write.csv(sim_PA, "MLB Simulated AB.csv")
proc.time() - time_start
all_play_by_play <- read.csv("data/All Play By Play.csv")
whiffs <- read.csv("data/2019whiff.csv")
whiffs <- whiffs[,c("player_id", "wrate")]
all_play_by_play$launch_angle <- as.numeric(as.character(all_play_by_play$launch_angle))
all_play_by_play$woba_denom <- as.numeric(as.character(all_play_by_play$woba_denom))
all_play_by_play$launch_speed <- as.numeric(as.character(all_play_by_play$launch_speed))
all_play_by_play$estimated_woba_using_speedangle <- as.numeric(as.character(all_play_by_play$estimated_woba_using_speedangle))
contact_consistency_chart <- function(player, num)
{
test <- filter(all_play_by_play,player_name==player)
test$roll_wOBA_num <- roll_sum(test$woba_value,num)
test$roll_wOBA_denom <- roll_sum(test$woba_denom,num)
test$wOBA <- test$roll_wOBA_num/test$roll_wOBA_denom
test$contact_consistency <- roll_sd(test$launch_angle,num)
test$aLA <- roll_mean(test$launch_angle,num)
test$aEV <- roll_mean(test$launch_speed,num)
test$BIP <- 1:length(test$batter)
test <- test[!is.na(test$contact_consistency),]
p1 <- ggplot(data = test, aes(x = BIP, y = contact_consistency)) + geom_line(color="red")
p2 <- ggplot(data = test, aes(x = BIP, y = wOBA)) + geom_line(color="blue")
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
}
all_play_by_play_clean <- all_play_by_play[,c("player_name",
"batter",
"launch_angle",
"launch_speed",
"woba_value",
"woba_denom",
"estimated_woba_using_speedangle")]
all_play_by_play_clean <- all_play_by_play_clean %>%
filter(woba_denom != 0) %>%
filter(!is.na(launch_angle)) %>%
filter(!is.na(estimated_woba_using_speedangle))
summary <- all_play_by_play_clean %>%
group_by(player_name,batter) %>%
arrange(player_name,batter) %>%
summarise(BIPs = n(),
sdLA = sd(launch_angle),
aLA = mean(launch_angle),
aEV = mean(launch_speed),
xwOBACon = round(sum(estimated_woba_using_speedangle)/sum(woba_denom),3),
wOBACon = round(sum(woba_value)/sum(woba_denom),3))
summary <- filter(summary, BIPs >= 50)
summary <- merge(summary, whiffs, by.x = "batter",by.y="player_id",all.x=TRUE)
summary$wrate <- as.numeric(as.character(summary$wrate))
summary <- summary%>% rename(
Whiff.Rate = wrate)
plot <- ggplot(summary, aes(x=wOBACon, y=sdLA, color=Whiff.Rate)) +
geom_point() +
scale_color_gradient2(midpoint=mean(summary$Whiff.Rate), low="blue", mid="white",
high="red", space ="Lab") +
labs(y = "sdLA",
x = "wOBACon",
caption = "Data from Baseball Savant",
title = "sdLA Versus wOBACon",
subtitle = "2019") +
theme_dark() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
setwd("~/ContactConsistency")
all_play_by_play <- read.csv("data/All Play By Play.csv")
whiffs <- read.csv("data/2019whiff.csv")
whiffs <- whiffs[,c("player_id", "wrate")]
all_play_by_play$launch_angle <- as.numeric(as.character(all_play_by_play$launch_angle))
all_play_by_play$woba_denom <- as.numeric(as.character(all_play_by_play$woba_denom))
all_play_by_play$launch_speed <- as.numeric(as.character(all_play_by_play$launch_speed))
all_play_by_play$estimated_woba_using_speedangle <- as.numeric(as.character(all_play_by_play$estimated_woba_using_speedangle))
contact_consistency_chart <- function(player, num)
{
test <- filter(all_play_by_play,player_name==player)
test$roll_wOBA_num <- roll_sum(test$woba_value,num)
test$roll_wOBA_denom <- roll_sum(test$woba_denom,num)
test$wOBA <- test$roll_wOBA_num/test$roll_wOBA_denom
test$contact_consistency <- roll_sd(test$launch_angle,num)
test$aLA <- roll_mean(test$launch_angle,num)
test$aEV <- roll_mean(test$launch_speed,num)
test$BIP <- 1:length(test$batter)
test <- test[!is.na(test$contact_consistency),]
p1 <- ggplot(data = test, aes(x = BIP, y = contact_consistency)) + geom_line(color="red")
p2 <- ggplot(data = test, aes(x = BIP, y = wOBA)) + geom_line(color="blue")
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
}
all_play_by_play_clean <- all_play_by_play[,c("player_name",
"batter",
"launch_angle",
"launch_speed",
"woba_value",
"woba_denom",
"estimated_woba_using_speedangle")]
all_play_by_play_clean <- all_play_by_play_clean %>%
filter(woba_denom != 0) %>%
filter(!is.na(launch_angle)) %>%
filter(!is.na(estimated_woba_using_speedangle))
summary <- all_play_by_play_clean %>%
group_by(player_name,batter) %>%
arrange(player_name,batter) %>%
summarise(BIPs = n(),
sdLA = sd(launch_angle),
aLA = mean(launch_angle),
aEV = mean(launch_speed),
xwOBACon = round(sum(estimated_woba_using_speedangle)/sum(woba_denom),3),
wOBACon = round(sum(woba_value)/sum(woba_denom),3))
summary <- filter(summary, BIPs >= 50)
summary <- merge(summary, whiffs, by.x = "batter",by.y="player_id",all.x=TRUE)
summary$wrate <- as.numeric(as.character(summary$wrate))
summary <- summary%>% rename(
Whiff.Rate = wrate)
plot <- ggplot(summary, aes(x=wOBACon, y=sdLA, color=Whiff.Rate)) +
geom_point() +
scale_color_gradient2(midpoint=mean(summary$Whiff.Rate), low="blue", mid="white",
high="red", space ="Lab") +
labs(y = "sdLA",
x = "wOBACon",
caption = "Data from Baseball Savant",
title = "sdLA Versus wOBACon",
subtitle = "2019") +
theme_dark() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
library(shiny)
library(roll)
library(dplyr)
library(grid)
library(ggplot2)
all_play_by_play <- read.csv("data/All Play By Play.csv")
whiffs <- read.csv("data/2019whiff.csv")
whiffs <- whiffs[,c("player_id", "wrate")]
all_play_by_play$launch_angle <- as.numeric(as.character(all_play_by_play$launch_angle))
all_play_by_play$woba_denom <- as.numeric(as.character(all_play_by_play$woba_denom))
all_play_by_play$launch_speed <- as.numeric(as.character(all_play_by_play$launch_speed))
all_play_by_play$estimated_woba_using_speedangle <- as.numeric(as.character(all_play_by_play$estimated_woba_using_speedangle))
contact_consistency_chart <- function(player, num)
{
test <- filter(all_play_by_play,player_name==player)
test$roll_wOBA_num <- roll_sum(test$woba_value,num)
test$roll_wOBA_denom <- roll_sum(test$woba_denom,num)
test$wOBA <- test$roll_wOBA_num/test$roll_wOBA_denom
test$contact_consistency <- roll_sd(test$launch_angle,num)
test$aLA <- roll_mean(test$launch_angle,num)
test$aEV <- roll_mean(test$launch_speed,num)
test$BIP <- 1:length(test$batter)
test <- test[!is.na(test$contact_consistency),]
p1 <- ggplot(data = test, aes(x = BIP, y = contact_consistency)) + geom_line(color="red")
p2 <- ggplot(data = test, aes(x = BIP, y = wOBA)) + geom_line(color="blue")
grid.newpage()
grid.draw(rbind(ggplotGrob(p1), ggplotGrob(p2), size = "last"))
}
all_play_by_play_clean <- all_play_by_play[,c("player_name",
"batter",
"launch_angle",
"launch_speed",
"woba_value",
"woba_denom",
"estimated_woba_using_speedangle")]
all_play_by_play_clean <- all_play_by_play_clean %>%
filter(woba_denom != 0) %>%
filter(!is.na(launch_angle)) %>%
filter(!is.na(estimated_woba_using_speedangle))
summary <- all_play_by_play_clean %>%
group_by(player_name,batter) %>%
arrange(player_name,batter) %>%
summarise(BIPs = n(),
sdLA = sd(launch_angle),
aLA = mean(launch_angle),
aEV = mean(launch_speed),
xwOBACon = round(sum(estimated_woba_using_speedangle)/sum(woba_denom),3),
wOBACon = round(sum(woba_value)/sum(woba_denom),3))
summary <- filter(summary, BIPs >= 50)
summary <- merge(summary, whiffs, by.x = "batter",by.y="player_id",all.x=TRUE)
summary$wrate <- as.numeric(as.character(summary$wrate))
summary <- summary%>% rename(
Whiff.Rate = wrate)
plot <- ggplot(summary, aes(x=wOBACon, y=sdLA, color=Whiff.Rate)) +
geom_point() +
scale_color_gradient2(midpoint=mean(summary$Whiff.Rate), low="blue", mid="white",
high="red", space ="Lab") +
labs(y = "sdLA",
x = "wOBACon",
caption = "Data from Baseball Savant",
title = "sdLA Versus wOBACon",
subtitle = "2019") +
theme_dark() +
theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 14),
plot.caption = element_text(size = 12))
rsconnect::deployApp()
View(summary)
summary$sdLA <- round(summary$sdLA,1)
summary$aLA <- round(summary$aLA,1)
summary$aEV <- round(summary$aEV,1)
summary$Whiff.Rate <- round(summary$Whiff.Rate,2)
summary <- arrange(summary,sdLA)
rsconnect::deployApp()
